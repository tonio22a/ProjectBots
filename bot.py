from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove()  # –û–±—ä–µ–∫—Ç –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
manager = DB_Manager(DATABASE)  # –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –ë–î

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"
attributes_of_projects = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞': ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
    "–°—Å—ã–ª–∫–∞": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
    "–°—Ç–∞—Ç—É—Å": ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]
}

## –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

def cansel(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è"""
    bot.send_message(message.chat.id, "‚ùó –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π - /info", reply_markup=hideBoard)

def no_projects(message):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    bot.send_message(message.chat.id, '‚ùó –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–ú–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—à—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

def gen_inline_markup(rows):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

def gen_markup(rows):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π)"""
    markup = ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

def info_project(message, user_id, project_name):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name)
    if not skills:
        skills = '‚ùó –ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: {info[0]}
–û–ø–∏—Å–∞–Ω–∏–µ: {info[1]}
–°—Å—ã–ª–∫–∞: {info[2]}
–°—Ç–∞—Ç—É—Å: {info[3]}
–ù–∞–≤—ã–∫–∏: {skills}
""")

## –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@bot.message_handler(commands=['start'])
def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    bot.send_message(message.chat.id, """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!) 
""")
    info(message)

@bot.message_handler(commands=['info'])
def info(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö"""
    bot.send_message(message.chat.id,
"""
üìã –í–æ—Ç –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Ç–µ–±–µ –ø–æ–º–æ—á—å:

/new_project - –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
/skills - –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫
/projects - –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã
/delete - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
/update_projects - –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è

‚ùó –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!""")

@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /new_project - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    bot.send_message(message.chat.id, "üë® –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

def name_project(message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "üñáÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
    bot.register_next_step_handler(message, link_project, data=data)

def link_project(message, data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"""
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()] 
    bot.send_message(message.chat.id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

def callback_project(message, data, statuses):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if status not in statuses:
        bot.send_message(message.chat.id, "‚ùå –¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(status)
    data.append(status_id)
    manager.insert_project([tuple(data)])
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

@bot.message_handler(commands=['skills'])
def skill_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /skills - –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤"""
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, '‚ùó –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)

def skill_project(message, projects):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –Ω–∞–≤—ã–∫–∞"""
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
        
    if project_name not in projects:
        bot.send_message(message.chat.id, '‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–≤—ã–∫', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        skills = [x[1] for x in manager.get_skills()]
        bot.send_message(message.chat.id, '‚ùó –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

def set_skill(message, project_name, skills):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É"""
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
        
    if skill not in skills:
        bot.send_message(message.chat.id, '‚ùó –í–∏–¥–∏–º–æ, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞–≤—ã–∫. –Ω–µ –∏–∑ —Å–ø–∏–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!) –í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    manager.insert_skill(user_id, project_name, skill )
    bot.send_message(message.chat.id, f'‚úÖ –ù–∞–≤—ã–∫ {skill} –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–µ–∫—Ç—É {project_name}')

@bot.message_handler(commands=['projects'])
def get_projects(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /projects - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: {x[2]} \n–°—Å—ã–ª–∫–∞: {x[4]}\n" for x in projects])
        bot.send_message(message.chat.id, text, reply_markup=gen_inline_markup([x[2] for x in projects]))
    else:
        no_projects(message)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ)"""
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

@bot.message_handler(commands=['delete'])
def delete_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /delete - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: {x[2]} \n–°—Å—ã–ª–∫–∞: {x[4]}\n" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        no_projects(message)

def delete_project(message, projects):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = message.text
    user_id = message.from_user.id

    if message.text == cancel_button:
        cansel(message)
        return
    if project not in projects:
        bot.send_message(message.chat.id, '‚ùó –£ —Ç–µ–±—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑!', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f'‚úÖ –ü—Ä–æ–µ–∫—Ç {project} —É–¥–∞–ª–µ–Ω!')

@bot.message_handler(commands=['update_projects'])
def update_project(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /update_projects - –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "‚ùó –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
    else:
        no_projects(message)

def update_project_step_2(message, projects):
    """–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!) –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects )
        return
    bot.send_message(message.chat.id, "‚ùó –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–µ", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

def update_project_step_3(message, project_name):
    """–í—ã–±–æ—Ä –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    attribute = message.text
    reply_markup = None 
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "‚ùó –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –æ—à–∏–±—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup=gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup = reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

def update_project_step_4(message, project_name, attribute): 
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞"""
    update_info = message.text
    if attribute == "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
        else:
            bot.send_message(message.chat.id, "‚ùó –ë—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!)")

@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏)"""
    user_id = message.from_user.id
    projects =[ x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
        return
    bot.reply_to(message, "‚ùì –¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
    info(message)

if __name__ == '__main__':
    bot.infinity_polling()